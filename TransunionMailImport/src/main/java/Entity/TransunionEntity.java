package Entity;

import lombok.Data;
import lombok.SneakyThrows;
import lombok.experimental.FieldNameConstants;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;
import java.util.stream.Collectors;


//MMCode,VehicleType,Make,Model,Variant,RegYear,PublicationSection,Master_Model,Make_Code,
// Model_Code,VariantCode,AxleConfiguration,BodyType,NoOfDoors,Drive,Seats,Use,Wheelbase,
// ManualAuto,NoGears,Cooling,CubicCapacity,CylConfiguration,EngineCycle,FuelTankSize,
// FuelType,Kilowatts,NoCylinders,TurboOrSuperCharged,GCM,GVM,Tare,Origin,FrontNoTyres,FrontTyreSize,
// RearNoTyres,RearTyreSize,IntroDate,DiscDate,CO2,Length,Height,Width,NewListPrice

/**
 * Class properties are generated by this select.
 *
 *
 select

 data_type,
 character_maximum_length,
 numeric_scale,
 case
 when DATA_TYPE = 'decimal' and NUMERIC_SCALE > 0 then 'Double'
 when DATA_TYPE = 'decimal' and NUMERIC_SCALE = 0 then 'Integer'
 when DATA_TYPE = 'char' and CHARACTER_MAXIMUM_LENGTH = 1 then 'Char'
 when DATA_TYPE = 'char' and CHARACTER_MAXIMUM_LENGTH > 1 then 'String'
 when DATA_TYPE = 'varchar' and CHARACTER_MAXIMUM_LENGTH = 1 then 'Char'
 when DATA_TYPE = 'varchar' and CHARACTER_MAXIMUM_LENGTH > 1 then 'String'

 end as data_type_java,
 concat(COLUMN_NAME,';')

 from information_schema.COLUMNS where TABLE_NAME = 'TRANSUNIONCODES';
 */

@Data
public class TransunionEntity {

    @Exclude
    final String emptyStr = "";

    public TransunionEntity(Map<String,String> csvIncoming){

        csvIncoming.forEach((colInput, value) -> {
            try {
                String colName = colInput.replace("_", emptyStr).toLowerCase();
                Field populateMe = TransunionEntityHelper.myFields.get(colName);
                Class<?> type = populateMe.getType();
                if (value.equals(emptyStr)) {
                    populateMe.set(this, null);
                } else {
                    if (type.equals(Integer.class)) {
                        populateMe.set(this, parseInteger(value));
                    } else if (type.equals(String.class)) {
                        populateMe.set(this, value);
                    } else if (type.equals(Character.class)) {
                        populateMe.set(this, parseCharacter(value));
                    } else if (type.equals(Double.class)) {
                        populateMe.set(this, parseDouble(value));
                    }
                }
            }
            catch(Exception e ){
                System.out.println(e.getMessage());
            }
        });
    }

    private Integer parseInteger(String value){
        return Integer.parseInt(value);
    }
    private Character parseCharacter(String value){
        return value.charAt(0);
    }
    private Double parseDouble(String value){
        return Double.parseDouble(value);

    }

    String mmCode;
    String vehicleType;
    String make;
    String model;
    String variant;
    Integer regYear;
    String publicationSection;
    String masterModel;
    String makeCode;
    String modelCode;
    String variantCode;
    String axleConfiguration;
    String bodyType;
    Integer noOfDoors;
    String drive;
    Integer seats;
    String use;
    String wheelbase;
    String manualAuto;
    Integer noGears;
    String cooling;
    Integer cubicCapacity;
    String cylConfiguration;
    String engineCycle;
    Double fuelTankSize;
    String fuelType;
    Double kilowatts;
    Integer noCylinders;
    String turboOrSuperCharged;
    Integer gcm;
    Integer gvm;
    Integer tare;
    String origin;
    Integer frontNoTyres;
    String frontTyreSize;
    Integer rearNoTyres;
    String rearTyreSize;
    String introDate;
    String discDate;
    Integer co2;
    Integer length;
    Integer height;
    Integer width;
    Double newListPrice;

}
